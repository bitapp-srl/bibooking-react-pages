{"version":3,"sources":["components/Header/styles.tsx","components/Lib.tsx","firebase.js","components/Header/index.tsx","components/Calendar/index.tsx","components/Login/styles.tsx","components/Login/index.tsx","context.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["HeaderStyled","styled","header","Logo","Link","Flex","div","flexDirection","justifyContent","alignItems","width","height","padding","Input","input","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","generateUserDocument","user","additionalData","a","userRef","firestore","doc","uid","get","exists","email","displayName","set","console","error","getUserDocument","userDocument","data","auth","Header","memo","to","onClick","signOut","Calendar","LoginBackground","LoginContainer","LoginInput","LoginError","span","LoginMainButton","button","formConfig","required","Login","useForm","register","handleSubmit","errors","onSubmit","password","signInWithEmailAndPassword","catch","log","name","ref","placeholder","type","initialState","loading","GlobalContext","createContext","state","dispatch","Provider","reducer","action","Overlay","props","LoggedRouter","path","NonLoggedRouter","App","useReducer","contextValue","useMemo","useEffect","onAuthStateChanged","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.86d6c500.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const HeaderStyled = styled.header`\n  height: var(--header-height);\n  background-color: var(--main);\n  box-shadow: var(--shadow-2);\n  color: var(--white);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-weight: 300;\n  padding: 0 var(--lateral-padding);\n  position: sticky;\n  top: 0;\n`;\n\nexport const Logo = styled(Link)`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 22rem;\n  line-height: 22rem;\n`;","import styled from 'styled-components';\n\ntype TFlex = {\n  flexDirection?: 'row' | 'column',\n  justifyContent?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around',\n  alignItems?: 'flex-start' | 'flex-end' | 'center',\n  width?: string,\n  height?: string,\n  padding?: string,\n  [key: string]: any\n}\n\nexport const Flex = styled.div<TFlex>`\n  display: flex;\n  flex-direction: ${({ flexDirection = 'row' }) => flexDirection };\n  justify-content: ${({ justifyContent = 'center' }) => justifyContent };\n  align-items: ${({ alignItems = 'center' }) => alignItems };\n  width: ${({ width }) => width ? width : 'auto'};\n  height: ${({ height }) => height ? height : 'auto'};\n  padding: ${({ padding }) => padding ? padding : '0'};\n`;\n\nexport const Input = styled.input<{ width?: string, height?: string, [key: string]: any }>`\n  border-bottom: 2rem solid var(--main);\n  outline: none;\n  background-color: var(--white);\n  padding: 0 3rem;\n  width: ${({ width }) => width ? width : 'auto'};\n  height: ${({ height }) => height ? height : 'auto'};\n`;","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC4vRrAFqZm8r1plYtPLYJZm2IY2AR9d9w\",\n  authDomain: \"bibooking.firebaseapp.com\",\n  databaseURL: \"https://bibooking.firebaseio.com\",\n  projectId: \"bibooking\",\n  storageBucket: \"bibooking.appspot.com\",\n  messagingSenderId: \"48933584913\",\n  appId: \"1:48933584913:web:bfbd2076ad4118821a31b0\"\n}\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const generateUserDocument = async (user, additionalData) => {\n  if (!user) return;\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapshot = await userRef.get();\n  if (!snapshot.exists) {\n    const { email, displayName } = user;\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error(\"Error creating user document\", error);\n    }\n  }\n  return getUserDocument(user.uid);\n};\nconst getUserDocument = async uid => {\n  if (!uid) return null;\n  try {\n    const userDocument = await firestore.doc(`users/${uid}`).get();\n    return {\n      uid,\n      ...userDocument.data()\n    };\n  } catch (error) {\n    console.error(\"Error fetching user\", error);\n  }\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();","import React, { memo } from 'react';\nimport { HeaderStyled, Logo } from './styles';\nimport { Flex } from '../Lib';\nimport { auth } from '../../firebase';\n\nconst Header = memo(() => (\n  <HeaderStyled>\n    <Logo to=\"/\">\n      <h1>BiBooking</h1>\n    </Logo>\n    <Flex>\n      <Flex>\n        <button onClick={() => auth.signOut()}>Sign out</button>\n      </Flex>\n    </Flex>\n  </HeaderStyled>\n));\n\nexport default Header;","import React from 'react';\nimport Header from '../Header';\n\nfunction Calendar () {\n  return (\n    <div>\n      <Header />\n      Calendar\n    </div>\n  )\n}\n\nexport default Calendar;","import styled from \"styled-components\";\nimport { Flex, Input } from \"../Lib\";\n\nexport const LoginBackground = styled(Flex)`\n  width: 100vw;\n  height: 100vh;\n  background-color: var(--main);\n`;\n\nexport const LoginContainer = styled(Flex)`\n  background-color: var(--white);\n  width: 28vw;\n  box-shadow: var(--shadow-1);\n  border-radius: 10rem;\n  flex-direction: column;\n  padding: 20rem 28rem;\n  h1 { font-size: 25rem; font-weight: 300; margin-bottom: 20rem; }\n  & > form {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n`;\n\nexport const LoginInput = styled(Input)<{ error: boolean }>`\n  border: 2rem solid var(--border-gray);\n  height: 38rem;\n  width: 100%;\n  border-radius: 7rem;\n  padding-left: 15rem;\n  margin-top: 20rem;\n  font-size: 15rem;\n  :hover, :focus {\n    border-color: var(--main-light);\n    transition: border-color 0.5s ease;\n  }\n  ${({ error }) => error && `\n    border-color: var(--error);\n    :hover, :focus {\n      border-color: var(--error);\n    }\n  `}\n`;\n\nexport const LoginError = styled.span`\n  color: var(--error);\n  font-size: 12rem;\n`;\n\nexport const LoginMainButton = styled.button`\n  border-radius: 30rem;\n  background-color: var(--main);\n  height: 48rem;\n  margin-top: 30rem;\n  width: 100%;\n  color: var(--white);\n`;","import React from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { auth } from '../../firebase';\nimport { Flex } from '../Lib';\nimport { LoginBackground, LoginContainer, LoginInput, LoginError, LoginMainButton } from './styles';\n\nconst formConfig = { required: true };\nfunction Login() {\n  const { register, handleSubmit, errors } = useForm();\n  \n  // Typescript bug, la definizione corretta sarebbe { email, password }: { email: string, password: string }\n  const onSubmit = ({ email, password }: any) => {\n    auth.signInWithEmailAndPassword(email, password)\n    .catch(error => console.log('Error Signing in with email and password'));\n  }\n  return (<>\n    <LoginBackground>\n\n    <LoginContainer>\n      <Flex flexDirection=\"column\">\n        <h1>BiBooking</h1>\n      </Flex>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <LoginInput name=\"email\" ref={register(formConfig)} placeholder=\"Email\" error={errors.email} />\n        { errors.email && <LoginError>Inserisci un indirizzo email valido</LoginError>}\n        <LoginInput name=\"password\" ref={register(formConfig)} placeholder=\"Password\" error={errors.password} />\n        { errors.password && <LoginError>La password non può essere vuota</LoginError>}\n        <LoginMainButton type=\"submit\">Log in</LoginMainButton>\n      </form>\n    </LoginContainer>\n    </LoginBackground>\n  </>);\n}\n\nexport default Login;\n","import { createContext, useContext, Dispatch } from 'react';\nexport const initialState = {\n  loading: false,\n  user: null,\n};\n\ntype Action = {\n  type: 'toggleLoading' | 'setUser',\n  data?: any,\n};\n\ntype State = {\n  loading: boolean,\n  user: any\n};\n\ntype Context = {\n  state: State,\n  dispatch: Dispatch<any>\n}\n\nconst GlobalContext = createContext<Context>({ state: initialState, dispatch: () => null });\nexport const Provider = GlobalContext.Provider;\n\nexport const reducer = (state: State, action: Action) : State => {\n  switch(action.type) {\n    case 'toggleLoading': return { ...state, loading: !state.loading };\n    case 'setUser': return { ...state, user: action.data }\n    default: return state;\n  }\n}\n\nexport const useGlobalContext = (): [State, Dispatch<any>] => {\n  const { state, dispatch } = useContext(GlobalContext);\n  return [state, dispatch];\n}","import React, { useEffect, useReducer, useMemo } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Calendar from './components/Calendar';\nimport { Flex } from './components/Lib';\nimport Login from './components/Login';\nimport { reducer, initialState, Provider } from './context';\nimport { auth, generateUserDocument } from './firebase';\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const { user, loading } = state;\n  const contextValue = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n  useEffect(() => {\n    auth.onAuthStateChanged(async user => {\n      const data = await generateUserDocument(user);\n      dispatch({ type: 'setUser', data });\n    });\n  }, [])\n\n  return !user\n    ? <NonLoggedRouter />\n    : (\n      <Provider value={contextValue}>\n        { loading && <Overlay /> }\n        <LoggedRouter />      \n      </Provider>\n    );\n}\n\nconst Overlay = styled((props: any) => <Flex {...props}>Loading...</Flex>)`\n  position: absolute;\n  top: 0;\n  height: 100vh;\n  width: 100vw;\n  background-color: black;\n  opacity: 0.8;\n  z-index: 100;\n  color: var(--white);\n  /* svg { animation: fa-spin 1s infinite linear; } */\n`;\n\nconst LoggedRouter = () => (\n  <Switch>\n    <Route path=\"/\"><Calendar /></Route>\n  </Switch>\n);\n\nconst NonLoggedRouter = () => (\n  <Switch>\n    <Route path=\"/\"><Login /></Route>\n  </Switch>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}